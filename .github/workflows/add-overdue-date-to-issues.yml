# This is a basic workflow to help you get started with Actions

name: Add the Overdue On date to issues

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  check-status:
    name: Check status on issue
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
      - uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.TN_PAT }}
          script: |
            const queryResult = await getProjectV2ItemsAndFields(170);
            const overdueOnFieldId = getProjectV2FieldId('Overdue on');
            let isSquadWork = false;
            let isOverdueOnSet = false;
            let updatedAt = '';
            
            for (const projectItem of queryResult.user.projectV2.items.nodes){
              for (const fieldValue of projectItem.fieldValues.nodes) {
                if (fieldValue.field !== undefined){
                  if (fieldValue.field.name === 'Status'){
                    if (fieldValue.name === 'Squad Work'){
                      isSquadWork = true
                    }
                  }
                  else if (fieldValue.field.name === 'Overdue on'){
                    isOverdueOnSet = true
                  }
                }
              }
              if (isSquadWork && !isOverdueOnSet){
                let updatedAtDateTime = new Date(projectItem.updatedAt)
                let createAtDateString = updatedAtDateTime.toISOString().split('T')[0]
                let OverdueOnDate = new Date(createAtDateString)
                OverdueOnDate.setDate(OverdueOnDate.getDate() + 10)
            
                const projectId = queryResult.user.projectV2.id
                const projectTitle = queryResult.user.projectV2.title
                const itemId = projectItem.id
            
                updateOverdueOnDate(projectId, itemId, overdueOnFieldId, OverdueOnDate.toISOString())
                console.log('Project Title: ' + projectTitle)
                console.log('Project ID: ' + projectId)
                console.log('New OverdueOn: ' + OverdueOnDate.toISOString())
                console.log('Overdue On Field ID: ' + overdueOnFieldId)
              }
            }
            
            async function getProjectV2ItemsAndFields(projectNumber){
              const query = `query($owner: String!, $projectNum: Int!){
                user(login:$owner) {
                  projectV2(number:$projectNum) {
                    id
                    title
                    fields(first: 100){
                      nodes {
                        ... on ProjectV2Field {
                          name
                          id
                        }
                      }
                    }
                    items(first: 100) {
                      nodes {
                        id
                        updatedAt
                        fieldValues(first: 100) {
                          nodes {
                            ... on ProjectV2ItemFieldTextValue {
                              field {
                                ... on ProjectV2Field {
                                  name
                                }
                              }
                              text
                              id
                            }
                            ... on ProjectV2ItemFieldSingleSelectValue {
                              field {
                                ... on ProjectV2SingleSelectField {
                                  name
                                }
                              }
                              name
                              id
                            }
                            ... on ProjectV2ItemFieldDateValue {
                              field {
                                ... on ProjectV2Field {
                                  name
                                }
                              }
                              date
                              id
                            }
                          }
                        }
                      }
                    }
                  }
                }
              } `;
              const variables = {
                owner: context.repo.owner,
                projectNum: projectNumber,
              }
            
              return await github.graphql(query, variables)
            }
            
            async function updateOverdueOnDate(projectId, itemId, fieldId, value){
              const mutation = `mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: Date!){
                updateProjectV2ItemFieldValue(input: {
                  projectId: $projectId
                  itemId: $itemId
                  fieldId: $fieldId
                  value: {date: $value}
                }){
                  projectV2Item {
                    id
                    fieldValueByName(name: "Title"){
                      ... on ProjectV2ItemFieldTextValue {
                        text
                      }
                    }
                  }
                }
              }`;
              const variables = {
                projectId: projectId,
                itemId: itemId,
                fieldId: fieldId,
                value: value
              }
            
              const data = await github.graphql(mutation, variables)
              console.log("-- Updated project item --")
              console.log("Title: " + data.updateProjectV2ItemFieldValue.projectV2Item.fieldValueByName.text)
              console.log("Item ID: " + itemId)
            
              return data 
            }
            
            function getProjectV2FieldId(name) {
              for (const field of queryResult.user.projectV2.fields.nodes){
                if (field.name === name){
                  return field.id
                }
              }
            }
          